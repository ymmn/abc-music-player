{"_source":"(function(){\n  /*\n   * Generated by PEG.js 0.7.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n  \n  function quote(s) {\n    /*\n     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a\n     * string literal except for the closing quote character, backslash,\n     * carriage return, line separator, paragraph separator, and line feed.\n     * Any character may appear in the form of an escape sequence.\n     *\n     * For portability, we also escape escape all control and non-ASCII\n     * characters. Note that \"\\0\" and \"\\v\" escape sequences are not used\n     * because JSHint does not like the first and IE the second.\n     */\n     return '\"' + s\n      .replace(/\\\\/g, '\\\\\\\\')  // backslash\n      .replace(/\"/g, '\\\\\"')    // closing quote character\n      .replace(/\\x08/g, '\\\\b') // backspace\n      .replace(/\\t/g, '\\\\t')   // horizontal tab\n      .replace(/\\n/g, '\\\\n')   // line feed\n      .replace(/\\f/g, '\\\\f')   // form feed\n      .replace(/\\r/g, '\\\\r')   // carriage return\n      .replace(/[\\x00-\\x07\\x0B\\x0E-\\x1F\\x80-\\uFFFF]/g, escape)\n      + '\"';\n  }\n  \n  var result = {\n    /*\n     * Parses the input with a generated parser. If the parsing is successfull,\n     * returns a value explicitly or implicitly specified by the grammar from\n     * which the parser was generated (see |PEG.buildParser|). If the parsing is\n     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.\n     */\n    parse: function(input, startRule) {\n      var parseFunctions = {\n        \"start\": parse_start,\n        \"header\": parse_header,\n        \"reference_number\": parse_reference_number,\n        \"title\": parse_title,\n        \"other_fields\": parse_other_fields,\n        \"tempo\": parse_tempo,\n        \"meter\": parse_meter,\n        \"meter_fraction\": parse_meter_fraction,\n        \"note_length_strict\": parse_note_length_strict,\n        \"note_length\": parse_note_length,\n        \"parts\": parse_parts,\n        \"part_spec\": parse_part_spec,\n        \"part\": parse_part,\n        \"key\": parse_key,\n        \"key_def\": parse_key_def,\n        \"key_spec\": parse_key_spec,\n        \"keynote\": parse_keynote,\n        \"key_accidental\": parse_key_accidental,\n        \"mode_spec\": parse_mode_spec,\n        \"mode\": parse_mode,\n        \"extratext\": parse_extratext,\n        \"global_accidental\": parse_global_accidental,\n        \"mode_minor\": parse_mode_minor,\n        \"mode_major\": parse_mode_major,\n        \"mode_lydian\": parse_mode_lydian,\n        \"mode_ionian\": parse_mode_ionian,\n        \"mode_mixolydian\": parse_mode_mixolydian,\n        \"mode_dorian\": parse_mode_dorian,\n        \"mode_aeolian\": parse_mode_aeolian,\n        \"mode_phrygian\": parse_mode_phrygian,\n        \"mode_locrian\": parse_mode_locrian,\n        \"song\": parse_song,\n        \"stave\": parse_stave,\n        \"measure\": parse_measure,\n        \"note_element\": parse_note_element,\n        \"note_stem\": parse_note_stem,\n        \"chord\": parse_chord,\n        \"note\": parse_note,\n        \"note_or_rest\": parse_note_or_rest,\n        \"pitch\": parse_pitch,\n        \"octave\": parse_octave,\n        \"basenote\": parse_basenote,\n        \"rest\": parse_rest,\n        \"tie\": parse_tie,\n        \"gracings\": parse_gracings,\n        \"grace_notes\": parse_grace_notes,\n        \"broken_rhythm\": parse_broken_rhythm,\n        \"tuplet\": parse_tuplet,\n        \"tuplet_spec\": parse_tuplet_spec,\n        \"bar\": parse_bar,\n        \"bars\": parse_bars,\n        \"nth_repeat\": parse_nth_repeat,\n        \"guitar_chord\": parse_guitar_chord,\n        \"sharp\": parse_sharp,\n        \"natural\": parse_natural,\n        \"flat\": parse_flat,\n        \"double_sharp\": parse_double_sharp,\n        \"double_flat\": parse_double_flat,\n        \"accidental\": parse_accidental,\n        \"middle_pairs\": parse_middle_pairs,\n        \"time_signature\": parse_time_signature,\n        \"stringNum\": parse_stringNum,\n        \"integer\": parse_integer,\n        \"string\": parse_string,\n        \"string_no_quotes\": parse_string_no_quotes,\n        \"alpha\": parse_alpha,\n        \"_\": parse__,\n        \"whitespace\": parse_whitespace,\n        \"LineTerminator\": parse_LineTerminator,\n        \"nl\": parse_nl,\n        \"comment\": parse_comment,\n        \"Zs\": parse_Zs,\n        \"EOF\": parse_EOF\n      };\n      \n      if (startRule !== undefined) {\n        if (parseFunctions[startRule] === undefined) {\n          throw new Error(\"Invalid rule name: \" + quote(startRule) + \".\");\n        }\n      } else {\n        startRule = \"start\";\n      }\n      \n      var pos = 0;\n      var reportFailures = 0;\n      var rightmostFailuresPos = 0;\n      var rightmostFailuresExpected = [];\n      \n      function padLeft(input, padding, length) {\n        var result = input;\n        \n        var padLength = length - input.length;\n        for (var i = 0; i < padLength; i++) {\n          result = padding + result;\n        }\n        \n        return result;\n      }\n      \n      function escape(ch) {\n        var charCode = ch.charCodeAt(0);\n        var escapeChar;\n        var length;\n        \n        if (charCode <= 0xFF) {\n          escapeChar = 'x';\n          length = 2;\n        } else {\n          escapeChar = 'u';\n          length = 4;\n        }\n        \n        return '\\\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);\n      }\n      \n      function matchFailed(failure) {\n        if (pos < rightmostFailuresPos) {\n          return;\n        }\n        \n        if (pos > rightmostFailuresPos) {\n          rightmostFailuresPos = pos;\n          rightmostFailuresExpected = [];\n        }\n        \n        rightmostFailuresExpected.push(failure);\n      }\n      \n      function parse_start() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_header();\n        if (result0 !== null) {\n          result1 = parse_song();\n          if (result1 !== null) {\n            result2 = parse_EOF();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, header, song) { return { header: header, song:song } })(pos0, result0[0], result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_header() {\n        var result0, result1, result2, result3, result4;\n        var pos0, pos1, pos2;\n        \n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_reference_number();\n        result0 = result0 !== null ? result0 : \"\";\n        if (result0 !== null) {\n          result2 = parse_title();\n          if (result2 !== null) {\n            result1 = [];\n            while (result2 !== null) {\n              result1.push(result2);\n              result2 = parse_title();\n            }\n          } else {\n            result1 = null;\n          }\n          if (result1 !== null) {\n            result2 = [];\n            pos2 = pos;\n            result3 = parse_other_fields();\n            if (result3 !== null) {\n              result4 = parse__();\n              if (result4 !== null) {\n                result3 = [result3, result4];\n              } else {\n                result3 = null;\n                pos = pos2;\n              }\n            } else {\n              result3 = null;\n              pos = pos2;\n            }\n            while (result3 !== null) {\n              result2.push(result3);\n              pos2 = pos;\n              result3 = parse_other_fields();\n              if (result3 !== null) {\n                result4 = parse__();\n                if (result4 !== null) {\n                  result3 = [result3, result4];\n                } else {\n                  result3 = null;\n                  pos = pos2;\n                }\n              } else {\n                result3 = null;\n                pos = pos2;\n              }\n            }\n            if (result2 !== null) {\n              pos2 = pos;\n              result3 = parse_key();\n              if (result3 !== null) {\n                result4 = parse__();\n                if (result4 !== null) {\n                  result3 = [result3, result4];\n                } else {\n                  result3 = null;\n                  pos = pos2;\n                }\n              } else {\n                result3 = null;\n                pos = pos2;\n              }\n              if (result3 !== null) {\n                result0 = [result0, result1, result2, result3];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, refnum, title, pairs, k) {\n            var p = {\n                refnum: refnum || 1, // Fallback to 1 for songs that don't include one\n                title:  title[0],\n                key:    k[0]\n            }\n            for (i = 0; i < pairs.length; i++) {\n                p[pairs[i][0][0]] = pairs[i][0][1];\n            }\n            return p;\n        })(pos0, result0[0], result0[1], result0[2], result0[3]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_reference_number() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.substr(pos, 2) === \"X:\") {\n          result0 = \"X:\";\n          pos += 2;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"X:\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse__();\n          result1 = result1 !== null ? result1 : \"\";\n          if (result1 !== null) {\n            result2 = parse_integer();\n            if (result2 !== null) {\n              result3 = parse__();\n              if (result3 !== null) {\n                result0 = [result0, result1, result2, result3];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, value) { return value })(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_title() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.substr(pos, 2) === \"T:\") {\n          result0 = \"T:\";\n          pos += 2;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"T:\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse__();\n          result1 = result1 !== null ? result1 : \"\";\n          if (result1 !== null) {\n            result2 = parse_string();\n            if (result2 !== null) {\n              result3 = parse__();\n              if (result3 !== null) {\n                result0 = [result0, result1, result2, result3];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, value) { return value })(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_other_fields() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.substr(pos, 2) === \"A:\") {\n          result0 = \"A:\";\n          pos += 2;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"A:\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.substr(pos, 2) === \"B:\") {\n            result0 = \"B:\";\n            pos += 2;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"B:\\\"\");\n            }\n          }\n          if (result0 === null) {\n            if (input.substr(pos, 2) === \"C:\") {\n              result0 = \"C:\";\n              pos += 2;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"C:\\\"\");\n              }\n            }\n            if (result0 === null) {\n              if (input.substr(pos, 2) === \"D:\") {\n                result0 = \"D:\";\n                pos += 2;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"D:\\\"\");\n                }\n              }\n              if (result0 === null) {\n                if (input.substr(pos, 2) === \"G:\") {\n                  result0 = \"G:\";\n                  pos += 2;\n                } else {\n                  result0 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"G:\\\"\");\n                  }\n                }\n                if (result0 === null) {\n                  if (input.substr(pos, 2) === \"H:\") {\n                    result0 = \"H:\";\n                    pos += 2;\n                  } else {\n                    result0 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"H:\\\"\");\n                    }\n                  }\n                  if (result0 === null) {\n                    if (input.substr(pos, 2) === \"N:\") {\n                      result0 = \"N:\";\n                      pos += 2;\n                    } else {\n                      result0 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\"N:\\\"\");\n                      }\n                    }\n                    if (result0 === null) {\n                      if (input.substr(pos, 2) === \"O:\") {\n                        result0 = \"O:\";\n                        pos += 2;\n                      } else {\n                        result0 = null;\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\"O:\\\"\");\n                        }\n                      }\n                      if (result0 === null) {\n                        if (input.substr(pos, 2) === \"R:\") {\n                          result0 = \"R:\";\n                          pos += 2;\n                        } else {\n                          result0 = null;\n                          if (reportFailures === 0) {\n                            matchFailed(\"\\\"R:\\\"\");\n                          }\n                        }\n                        if (result0 === null) {\n                          if (input.substr(pos, 2) === \"S:\") {\n                            result0 = \"S:\";\n                            pos += 2;\n                          } else {\n                            result0 = null;\n                            if (reportFailures === 0) {\n                              matchFailed(\"\\\"S:\\\"\");\n                            }\n                          }\n                          if (result0 === null) {\n                            if (input.substr(pos, 2) === \"Z:\") {\n                              result0 = \"Z:\";\n                              pos += 2;\n                            } else {\n                              result0 = null;\n                              if (reportFailures === 0) {\n                                matchFailed(\"\\\"Z:\\\"\");\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse__();\n          if (result1 !== null) {\n            result2 = parse_string();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, f, value) {\n             var fields = {\n                 \"A:\": \"area\",\n                 \"B:\": \"book\",\n                 \"C:\": \"composer\",\n                 \"D:\": \"discography\",\n                 \"G:\": \"group\",\n                 \"H:\": \"history\",\n                 \"N:\": \"notes\",\n                 \"O:\": \"origin\",\n                 \"R:\": \"rythm\",\n                 \"S:\": \"source\",\n                 \"Z:\": \"t_note\"\n             };\n             return [fields[f] || \"\", value];\n         })(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.substr(pos, 2) === \"L:\") {\n            result0 = \"L:\";\n            pos += 2;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"L:\\\"\");\n            }\n          }\n          if (result0 !== null) {\n            result1 = parse__();\n            if (result1 !== null) {\n              result2 = parse_note_length_strict();\n              if (result2 !== null) {\n                result0 = [result0, result1, result2];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = (function(offset, n) {\n               defaultTime = WHOLE * eval(n);\n               return [\"note_length\", defaultTime];\n           })(pos0, result0[2]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n          if (result0 === null) {\n            pos0 = pos;\n            pos1 = pos;\n            if (input.substr(pos, 2) === \"M:\") {\n              result0 = \"M:\";\n              pos += 2;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"M:\\\"\");\n              }\n            }\n            if (result0 !== null) {\n              result1 = parse__();\n              if (result1 !== null) {\n                result2 = parse_meter();\n                if (result2 !== null) {\n                  result0 = [result0, result1, result2];\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n            if (result0 !== null) {\n              result0 = (function(offset, m) {\n                 defaultMeter = WHOLE * (eval(m) < 0.75 ? 0.0625 : 0.125);\n                 return [\"meter\", defaultMeter];\n             })(pos0, result0[2]);\n            }\n            if (result0 === null) {\n              pos = pos0;\n            }\n            if (result0 === null) {\n              pos0 = pos;\n              pos1 = pos;\n              if (input.substr(pos, 2) === \"P:\") {\n                result0 = \"P:\";\n                pos += 2;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"P:\\\"\");\n                }\n              }\n              if (result0 !== null) {\n                result1 = parse__();\n                if (result1 !== null) {\n                  result2 = parse_parts();\n                  if (result2 !== null) {\n                    result0 = [result0, result1, result2];\n                  } else {\n                    result0 = null;\n                    pos = pos1;\n                  }\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n              if (result0 !== null) {\n                result0 = (function(offset, p) {\n                  return p;\n               })(pos0, result0[2]);\n              }\n              if (result0 === null) {\n                pos = pos0;\n              }\n              if (result0 === null) {\n                pos0 = pos;\n                pos1 = pos;\n                if (input.substr(pos, 2) === \"Q:\") {\n                  result0 = \"Q:\";\n                  pos += 2;\n                } else {\n                  result0 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"Q:\\\"\");\n                  }\n                }\n                if (result0 !== null) {\n                  result1 = parse__();\n                  if (result1 !== null) {\n                    result2 = parse_tempo();\n                    if (result2 !== null) {\n                      result0 = [result0, result1, result2];\n                    } else {\n                      result0 = null;\n                      pos = pos1;\n                    }\n                  } else {\n                    result0 = null;\n                    pos = pos1;\n                  }\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n                if (result0 !== null) {\n                  result0 = (function(offset, t) {\n                    return t;\n                 })(pos0, result0[2]);\n                }\n                if (result0 === null) {\n                  pos = pos0;\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      \n      function parse_tempo() {\n        var result0, result1, result2, result3, result4;\n        var pos0;\n        \n        result1 = parse_integer();\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_integer();\n          }\n        } else {\n          result0 = null;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          if (input.charCodeAt(pos) === 67) {\n            result0 = \"C\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"C\\\"\");\n            }\n          }\n          if (result0 !== null) {\n            result1 = parse_note_length();\n            result1 = result1 !== null ? result1 : \"\";\n            if (result1 !== null) {\n              if (input.charCodeAt(pos) === 61) {\n                result2 = \"=\";\n                pos++;\n              } else {\n                result2 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"=\\\"\");\n                }\n              }\n              if (result2 !== null) {\n                result4 = parse_integer();\n                if (result4 !== null) {\n                  result3 = [];\n                  while (result4 !== null) {\n                    result3.push(result4);\n                    result4 = parse_integer();\n                  }\n                } else {\n                  result3 = null;\n                }\n                if (result3 !== null) {\n                  result0 = [result0, result1, result2, result3];\n                } else {\n                  result0 = null;\n                  pos = pos0;\n                }\n              } else {\n                result0 = null;\n                pos = pos0;\n              }\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n          if (result0 === null) {\n            pos0 = pos;\n            result0 = parse_note_length_strict();\n            if (result0 !== null) {\n              if (input.charCodeAt(pos) === 61) {\n                result1 = \"=\";\n                pos++;\n              } else {\n                result1 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"=\\\"\");\n                }\n              }\n              if (result1 !== null) {\n                result3 = parse_integer();\n                if (result3 !== null) {\n                  result2 = [];\n                  while (result3 !== null) {\n                    result2.push(result3);\n                    result3 = parse_integer();\n                  }\n                } else {\n                  result2 = null;\n                }\n                if (result2 !== null) {\n                  result0 = [result0, result1, result2];\n                } else {\n                  result0 = null;\n                  pos = pos0;\n                }\n              } else {\n                result0 = null;\n                pos = pos0;\n              }\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          }\n        }\n        return result0;\n      }\n      \n      function parse_meter() {\n        var result0;\n        \n        if (input.charCodeAt(pos) === 67) {\n          result0 = \"C\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"C\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.substr(pos, 2) === \"C|\") {\n            result0 = \"C|\";\n            pos += 2;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"C|\\\"\");\n            }\n          }\n          if (result0 === null) {\n            result0 = parse_meter_fraction();\n          }\n        }\n        return result0;\n      }\n      \n      function parse_meter_fraction() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        result1 = parse_integer();\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_integer();\n          }\n        } else {\n          result0 = null;\n        }\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 47) {\n            result1 = \"/\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"/\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result3 = parse_integer();\n            if (result3 !== null) {\n              result2 = [];\n              while (result3 !== null) {\n                result2.push(result3);\n                result3 = parse_integer();\n              }\n            } else {\n              result2 = null;\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, l) { return l.join(\"\") })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_note_length_strict() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        result1 = parse_integer();\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_integer();\n          }\n        } else {\n          result0 = null;\n        }\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 47) {\n            result1 = \"/\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"/\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result3 = parse_integer();\n            if (result3 !== null) {\n              result2 = [];\n              while (result3 !== null) {\n                result2.push(result3);\n                result3 = parse_integer();\n              }\n            } else {\n              result2 = null;\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, l) { return l.join(\"\") })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_note_length() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        result1 = parse_integer();\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_integer();\n          }\n        } else {\n          result0 = null;\n        }\n        result0 = result0 !== null ? result0 : \"\";\n        if (result0 !== null) {\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 47) {\n            result1 = \"/\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"/\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result3 = parse_integer();\n            if (result3 !== null) {\n              result2 = [];\n              while (result3 !== null) {\n                result2.push(result3);\n                result3 = parse_integer();\n              }\n            } else {\n              result2 = null;\n            }\n            if (result2 !== null) {\n              result1 = [result1, result2];\n            } else {\n              result1 = null;\n              pos = pos1;\n            }\n          } else {\n            result1 = null;\n            pos = pos1;\n          }\n          result1 = result1 !== null ? result1 : \"\";\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_parts() {\n        var result0, result1;\n        \n        result1 = parse_part_spec();\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_part_spec();\n          }\n        } else {\n          result0 = null;\n        }\n        return result0;\n      }\n      \n      function parse_part_spec() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        result0 = parse_part();\n        if (result0 === null) {\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 40) {\n            result0 = \"(\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"(\\\"\");\n            }\n          }\n          if (result0 !== null) {\n            result2 = parse_part_spec();\n            if (result2 !== null) {\n              result1 = [];\n              while (result2 !== null) {\n                result1.push(result2);\n                result2 = parse_part_spec();\n              }\n            } else {\n              result1 = null;\n            }\n            if (result1 !== null) {\n              if (input.charCodeAt(pos) === 41) {\n                result2 = \")\";\n                pos++;\n              } else {\n                result2 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\")\\\"\");\n                }\n              }\n              if (result2 !== null) {\n                result0 = [result0, result1, result2];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        if (result0 !== null) {\n          result2 = parse_integer();\n          if (result2 !== null) {\n            result1 = [];\n            while (result2 !== null) {\n              result1.push(result2);\n              result2 = parse_integer();\n            }\n          } else {\n            result1 = null;\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_part() {\n        var result0;\n        \n        if (input.charCodeAt(pos) === 65) {\n          result0 = \"A\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"A\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 66) {\n            result0 = \"B\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"B\\\"\");\n            }\n          }\n          if (result0 === null) {\n            if (input.charCodeAt(pos) === 67) {\n              result0 = \"C\";\n              pos++;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"C\\\"\");\n              }\n            }\n            if (result0 === null) {\n              if (input.charCodeAt(pos) === 68) {\n                result0 = \"D\";\n                pos++;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"D\\\"\");\n                }\n              }\n              if (result0 === null) {\n                if (input.charCodeAt(pos) === 69) {\n                  result0 = \"E\";\n                  pos++;\n                } else {\n                  result0 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"E\\\"\");\n                  }\n                }\n                if (result0 === null) {\n                  if (input.charCodeAt(pos) === 70) {\n                    result0 = \"F\";\n                    pos++;\n                  } else {\n                    result0 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"F\\\"\");\n                    }\n                  }\n                  if (result0 === null) {\n                    if (input.charCodeAt(pos) === 71) {\n                      result0 = \"G\";\n                      pos++;\n                    } else {\n                      result0 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\"G\\\"\");\n                      }\n                    }\n                    if (result0 === null) {\n                      if (input.charCodeAt(pos) === 72) {\n                        result0 = \"H\";\n                        pos++;\n                      } else {\n                        result0 = null;\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\"H\\\"\");\n                        }\n                      }\n                      if (result0 === null) {\n                        if (input.charCodeAt(pos) === 73) {\n                          result0 = \"I\";\n                          pos++;\n                        } else {\n                          result0 = null;\n                          if (reportFailures === 0) {\n                            matchFailed(\"\\\"I\\\"\");\n                          }\n                        }\n                        if (result0 === null) {\n                          if (input.charCodeAt(pos) === 74) {\n                            result0 = \"J\";\n                            pos++;\n                          } else {\n                            result0 = null;\n                            if (reportFailures === 0) {\n                              matchFailed(\"\\\"J\\\"\");\n                            }\n                          }\n                          if (result0 === null) {\n                            if (input.charCodeAt(pos) === 75) {\n                              result0 = \"K\";\n                              pos++;\n                            } else {\n                              result0 = null;\n                              if (reportFailures === 0) {\n                                matchFailed(\"\\\"K\\\"\");\n                              }\n                            }\n                            if (result0 === null) {\n                              if (input.charCodeAt(pos) === 76) {\n                                result0 = \"L\";\n                                pos++;\n                              } else {\n                                result0 = null;\n                                if (reportFailures === 0) {\n                                  matchFailed(\"\\\"L\\\"\");\n                                }\n                              }\n                              if (result0 === null) {\n                                if (input.charCodeAt(pos) === 77) {\n                                  result0 = \"M\";\n                                  pos++;\n                                } else {\n                                  result0 = null;\n                                  if (reportFailures === 0) {\n                                    matchFailed(\"\\\"M\\\"\");\n                                  }\n                                }\n                                if (result0 === null) {\n                                  if (input.charCodeAt(pos) === 78) {\n                                    result0 = \"N\";\n                                    pos++;\n                                  } else {\n                                    result0 = null;\n                                    if (reportFailures === 0) {\n                                      matchFailed(\"\\\"N\\\"\");\n                                    }\n                                  }\n                                  if (result0 === null) {\n                                    if (input.charCodeAt(pos) === 79) {\n                                      result0 = \"O\";\n                                      pos++;\n                                    } else {\n                                      result0 = null;\n                                      if (reportFailures === 0) {\n                                        matchFailed(\"\\\"O\\\"\");\n                                      }\n                                    }\n                                    if (result0 === null) {\n                                      if (input.charCodeAt(pos) === 80) {\n                                        result0 = \"P\";\n                                        pos++;\n                                      } else {\n                                        result0 = null;\n                                        if (reportFailures === 0) {\n                                          matchFailed(\"\\\"P\\\"\");\n                                        }\n                                      }\n                                      if (result0 === null) {\n                                        if (input.charCodeAt(pos) === 81) {\n                                          result0 = \"Q\";\n                                          pos++;\n                                        } else {\n                                          result0 = null;\n                                          if (reportFailures === 0) {\n                                            matchFailed(\"\\\"Q\\\"\");\n                                          }\n                                        }\n                                        if (result0 === null) {\n                                          if (input.charCodeAt(pos) === 82) {\n                                            result0 = \"R\";\n                                            pos++;\n                                          } else {\n                                            result0 = null;\n                                            if (reportFailures === 0) {\n                                              matchFailed(\"\\\"R\\\"\");\n                                            }\n                                          }\n                                          if (result0 === null) {\n                                            if (input.charCodeAt(pos) === 83) {\n                                              result0 = \"S\";\n                                              pos++;\n                                            } else {\n                                              result0 = null;\n                                              if (reportFailures === 0) {\n                                                matchFailed(\"\\\"S\\\"\");\n                                              }\n                                            }\n                                            if (result0 === null) {\n                                              if (input.charCodeAt(pos) === 84) {\n                                                result0 = \"T\";\n                                                pos++;\n                                              } else {\n                                                result0 = null;\n                                                if (reportFailures === 0) {\n                                                  matchFailed(\"\\\"T\\\"\");\n                                                }\n                                              }\n                                              if (result0 === null) {\n                                                if (input.charCodeAt(pos) === 85) {\n                                                  result0 = \"U\";\n                                                  pos++;\n                                                } else {\n                                                  result0 = null;\n                                                  if (reportFailures === 0) {\n                                                    matchFailed(\"\\\"U\\\"\");\n                                                  }\n                                                }\n                                                if (result0 === null) {\n                                                  if (input.charCodeAt(pos) === 86) {\n                                                    result0 = \"V\";\n                                                    pos++;\n                                                  } else {\n                                                    result0 = null;\n                                                    if (reportFailures === 0) {\n                                                      matchFailed(\"\\\"V\\\"\");\n                                                    }\n                                                  }\n                                                  if (result0 === null) {\n                                                    if (input.charCodeAt(pos) === 88) {\n                                                      result0 = \"X\";\n                                                      pos++;\n                                                    } else {\n                                                      result0 = null;\n                                                      if (reportFailures === 0) {\n                                                        matchFailed(\"\\\"X\\\"\");\n                                                      }\n                                                    }\n                                                    if (result0 === null) {\n                                                      if (input.charCodeAt(pos) === 89) {\n                                                        result0 = \"Y\";\n                                                        pos++;\n                                                      } else {\n                                                        result0 = null;\n                                                        if (reportFailures === 0) {\n                                                          matchFailed(\"\\\"Y\\\"\");\n                                                        }\n                                                      }\n                                                      if (result0 === null) {\n                                                        if (input.charCodeAt(pos) === 90) {\n                                                          result0 = \"Z\";\n                                                          pos++;\n                                                        } else {\n                                                          result0 = null;\n                                                          if (reportFailures === 0) {\n                                                            matchFailed(\"\\\"Z\\\"\");\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      \n      function parse_key() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.substr(pos, 2) === \"K:\") {\n          result0 = \"K:\";\n          pos += 2;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"K:\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse__();\n          if (result1 !== null) {\n            result2 = parse_key_def();\n            if (result2 !== null) {\n              result3 = parse__();\n              if (result3 !== null) {\n                result0 = [result0, result1, result2, result3];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, k) { return k })(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_key_def() {\n        var result0;\n        \n        result0 = parse_key_spec();\n        if (result0 === null) {\n          if (input.substr(pos, 2) === \"HP\") {\n            result0 = \"HP\";\n            pos += 2;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"HP\\\"\");\n            }\n          }\n          if (result0 === null) {\n            if (input.substr(pos, 2) === \"Hp\") {\n              result0 = \"Hp\";\n              pos += 2;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"Hp\\\"\");\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      \n      function parse_key_spec() {\n        var result0, result1, result2, result3, result4;\n        var pos0, pos1, pos2;\n        \n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_keynote();\n        if (result0 !== null) {\n          result1 = parse_mode_spec();\n          result1 = result1 !== null ? result1 : \"\";\n          if (result1 !== null) {\n            result2 = [];\n            pos2 = pos;\n            if (input.charCodeAt(pos) === 32) {\n              result3 = \" \";\n              pos++;\n            } else {\n              result3 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\" \\\"\");\n              }\n            }\n            if (result3 !== null) {\n              result4 = parse_global_accidental();\n              if (result4 !== null) {\n                result3 = [result3, result4];\n              } else {\n                result3 = null;\n                pos = pos2;\n              }\n            } else {\n              result3 = null;\n              pos = pos2;\n            }\n            while (result3 !== null) {\n              result2.push(result3);\n              pos2 = pos;\n              if (input.charCodeAt(pos) === 32) {\n                result3 = \" \";\n                pos++;\n              } else {\n                result3 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\" \\\"\");\n                }\n              }\n              if (result3 !== null) {\n                result4 = parse_global_accidental();\n                if (result4 !== null) {\n                  result3 = [result3, result4];\n                } else {\n                  result3 = null;\n                  pos = pos2;\n                }\n              } else {\n                result3 = null;\n                pos = pos2;\n              }\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, k, m, g) {\n            if (m)\n                k.mode = m;\n            return k;\n        })(pos0, result0[0], result0[1], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_keynote() {\n        var result0, result1;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_basenote();\n        if (result0 !== null) {\n          result1 = parse_key_accidental();\n          result1 = result1 !== null ? result1 : \"\";\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, bn, k) {\n            return {\n                baseNote: bn,\n                accidental: k\n            }\n        })(pos0, result0[0], result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_key_accidental() {\n        var result0;\n        \n        if (input.charCodeAt(pos) === 35) {\n          result0 = \"#\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"#\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 98) {\n            result0 = \"b\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"b\\\"\");\n            }\n          }\n        }\n        return result0;\n      }\n      \n      function parse_mode_spec() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 32) {\n          result0 = \" \";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\" \\\"\");\n          }\n        }\n        result0 = result0 !== null ? result0 : \"\";\n        if (result0 !== null) {\n          result1 = parse_mode();\n          if (result1 !== null) {\n            result2 = parse_extratext();\n            result2 = result2 !== null ? result2 : \"\";\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, m) { return m })(pos0, result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_mode() {\n        var result0;\n        \n        result0 = parse_mode_minor();\n        if (result0 === null) {\n          result0 = parse_mode_major();\n          if (result0 === null) {\n            result0 = parse_mode_lydian();\n            if (result0 === null) {\n              result0 = parse_mode_ionian();\n              if (result0 === null) {\n                result0 = parse_mode_mixolydian();\n                if (result0 === null) {\n                  result0 = parse_mode_dorian();\n                  if (result0 === null) {\n                    result0 = parse_mode_aeolian();\n                    if (result0 === null) {\n                      result0 = parse_mode_phrygian();\n                      if (result0 === null) {\n                        result0 = parse_mode_locrian();\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      \n      function parse_extratext() {\n        var result0, result1;\n        \n        result0 = [];\n        result1 = parse_alpha();\n        while (result1 !== null) {\n          result0.push(result1);\n          result1 = parse_alpha();\n        }\n        return result0;\n      }\n      \n      function parse_global_accidental() {\n        var result0, result1;\n        var pos0;\n        \n        pos0 = pos;\n        result0 = parse_accidental();\n        if (result0 !== null) {\n          result1 = parse_basenote();\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_mode_minor() {\n        var result0, result1, result2;\n        var pos0, pos1, pos2;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 109) {\n          result0 = \"m\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"m\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 77) {\n            result0 = \"M\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"M\\\"\");\n            }\n          }\n        }\n        if (result0 !== null) {\n          pos2 = pos;\n          if (input.charCodeAt(pos) === 105) {\n            result1 = \"i\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"i\\\"\");\n            }\n          }\n          if (result1 === null) {\n            if (input.charCodeAt(pos) === 73) {\n              result1 = \"I\";\n              pos++;\n            } else {\n              result1 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"I\\\"\");\n              }\n            }\n          }\n          if (result1 !== null) {\n            if (input.charCodeAt(pos) === 110) {\n              result2 = \"n\";\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"n\\\"\");\n              }\n            }\n            if (result2 === null) {\n              if (input.charCodeAt(pos) === 78) {\n                result2 = \"N\";\n                pos++;\n              } else {\n                result2 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"N\\\"\");\n                }\n              }\n            }\n            if (result2 !== null) {\n              result1 = [result1, result2];\n            } else {\n              result1 = null;\n              pos = pos2;\n            }\n          } else {\n            result1 = null;\n            pos = pos2;\n          }\n          result1 = result1 !== null ? result1 : \"\";\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, chars) { return chars.join(\"\") })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_mode_major() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 109) {\n          result0 = \"m\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"m\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 77) {\n            result0 = \"M\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"M\\\"\");\n            }\n          }\n        }\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 97) {\n            result1 = \"a\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"a\\\"\");\n            }\n          }\n          if (result1 === null) {\n            if (input.charCodeAt(pos) === 65) {\n              result1 = \"A\";\n              pos++;\n            } else {\n              result1 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"A\\\"\");\n              }\n            }\n          }\n          if (result1 !== null) {\n            if (input.charCodeAt(pos) === 106) {\n              result2 = \"j\";\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"j\\\"\");\n              }\n            }\n            if (result2 === null) {\n              if (input.charCodeAt(pos) === 74) {\n                result2 = \"J\";\n                pos++;\n              } else {\n                result2 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"J\\\"\");\n                }\n              }\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, chars) { return chars.join(\"\") })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_mode_lydian() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 108) {\n          result0 = \"l\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"l\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 76) {\n            result0 = \"L\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"L\\\"\");\n            }\n          }\n        }\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 121) {\n            result1 = \"y\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"y\\\"\");\n            }\n          }\n          if (result1 === null) {\n            if (input.charCodeAt(pos) === 89) {\n              result1 = \"Y\";\n              pos++;\n            } else {\n              result1 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"Y\\\"\");\n              }\n            }\n          }\n          if (result1 !== null) {\n            if (input.charCodeAt(pos) === 100) {\n              result2 = \"d\";\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"d\\\"\");\n              }\n            }\n            if (result2 === null) {\n              if (input.charCodeAt(pos) === 68) {\n                result2 = \"D\";\n                pos++;\n              } else {\n                result2 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"D\\\"\");\n                }\n              }\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, chars) { return chars.join(\"\") })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_mode_ionian() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 105) {\n          result0 = \"i\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"i\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 73) {\n            result0 = \"I\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"I\\\"\");\n            }\n          }\n        }\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 111) {\n            result1 = \"o\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"o\\\"\");\n            }\n          }\n          if (result1 === null) {\n            if (input.charCodeAt(pos) === 79) {\n              result1 = \"O\";\n              pos++;\n            } else {\n              result1 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"O\\\"\");\n              }\n            }\n          }\n          if (result1 !== null) {\n            if (input.charCodeAt(pos) === 110) {\n              result2 = \"n\";\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"n\\\"\");\n              }\n            }\n            if (result2 === null) {\n              if (input.charCodeAt(pos) === 78) {\n                result2 = \"N\";\n                pos++;\n              } else {\n                result2 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"N\\\"\");\n                }\n              }\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, chars) { return chars.join(\"\") })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_mode_mixolydian() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 109) {\n          result0 = \"m\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"m\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 77) {\n            result0 = \"M\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"M\\\"\");\n            }\n          }\n        }\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 105) {\n            result1 = \"i\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"i\\\"\");\n            }\n          }\n          if (result1 === null) {\n            if (input.charCodeAt(pos) === 73) {\n              result1 = \"I\";\n              pos++;\n            } else {\n              result1 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"I\\\"\");\n              }\n            }\n          }\n          if (result1 !== null) {\n            if (input.charCodeAt(pos) === 120) {\n              result2 = \"x\";\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"x\\\"\");\n              }\n            }\n            if (result2 === null) {\n              if (input.charCodeAt(pos) === 88) {\n                result2 = \"X\";\n                pos++;\n              } else {\n                result2 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"X\\\"\");\n                }\n              }\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, chars) { return chars.join(\"\") })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_mode_dorian() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 100) {\n          result0 = \"d\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"d\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 68) {\n            result0 = \"D\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"D\\\"\");\n            }\n          }\n        }\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 111) {\n            result1 = \"o\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"o\\\"\");\n            }\n          }\n          if (result1 === null) {\n            if (input.charCodeAt(pos) === 79) {\n              result1 = \"O\";\n              pos++;\n            } else {\n              result1 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"O\\\"\");\n              }\n            }\n          }\n          if (result1 !== null) {\n            if (input.charCodeAt(pos) === 114) {\n              result2 = \"r\";\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"r\\\"\");\n              }\n            }\n            if (result2 === null) {\n              if (input.charCodeAt(pos) === 82) {\n                result2 = \"R\";\n                pos++;\n              } else {\n                result2 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"R\\\"\");\n                }\n              }\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, chars) { return chars.join(\"\") })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_mode_aeolian() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 97) {\n          result0 = \"a\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"a\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 65) {\n            result0 = \"A\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"A\\\"\");\n            }\n          }\n        }\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 101) {\n            result1 = \"e\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"e\\\"\");\n            }\n          }\n          if (result1 === null) {\n            if (input.charCodeAt(pos) === 69) {\n              result1 = \"E\";\n              pos++;\n            } else {\n              result1 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"E\\\"\");\n              }\n            }\n          }\n          if (result1 !== null) {\n            if (input.charCodeAt(pos) === 111) {\n              result2 = \"o\";\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"o\\\"\");\n              }\n            }\n            if (result2 === null) {\n              if (input.charCodeAt(pos) === 79) {\n                result2 = \"O\";\n                pos++;\n              } else {\n                result2 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"O\\\"\");\n                }\n              }\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, chars) { return chars.join(\"\") })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_mode_phrygian() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 112) {\n          result0 = \"p\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"p\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 80) {\n            result0 = \"P\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"P\\\"\");\n            }\n          }\n        }\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 104) {\n            result1 = \"h\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"h\\\"\");\n            }\n          }\n          if (result1 === null) {\n            if (input.charCodeAt(pos) === 72) {\n              result1 = \"H\";\n              pos++;\n            } else {\n              result1 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"H\\\"\");\n              }\n            }\n          }\n          if (result1 !== null) {\n            if (input.charCodeAt(pos) === 114) {\n              result2 = \"r\";\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"r\\\"\");\n              }\n            }\n            if (result2 === null) {\n              if (input.charCodeAt(pos) === 82) {\n                result2 = \"R\";\n                pos++;\n              } else {\n                result2 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"R\\\"\");\n                }\n              }\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, chars) { return chars.join(\"\") })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_mode_locrian() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 108) {\n          result0 = \"l\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"l\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 76) {\n            result0 = \"L\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"L\\\"\");\n            }\n          }\n        }\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 111) {\n            result1 = \"o\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"o\\\"\");\n            }\n          }\n          if (result1 === null) {\n            if (input.charCodeAt(pos) === 79) {\n              result1 = \"O\";\n              pos++;\n            } else {\n              result1 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"O\\\"\");\n              }\n            }\n          }\n          if (result1 !== null) {\n            if (input.charCodeAt(pos) === 99) {\n              result2 = \"c\";\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"c\\\"\");\n              }\n            }\n            if (result2 === null) {\n              if (input.charCodeAt(pos) === 67) {\n                result2 = \"C\";\n                pos++;\n              } else {\n                result2 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"C\\\"\");\n                }\n              }\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, chars) { return chars.join(\"\") })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_song() {\n        var result0, result1;\n        var pos0;\n        \n        pos0 = pos;\n        result1 = parse_stave();\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_stave();\n          }\n        } else {\n          result0 = null;\n        }\n        if (result0 !== null) {\n          result1 = parse__();\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_stave() {\n        var result0, result1;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        result1 = parse_measure();\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_measure();\n          }\n        } else {\n          result0 = null;\n        }\n        if (result0 !== null) {\n          result1 = parse__();\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, measures) { return measures; })(pos0, result0[0]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_measure() {\n        var result0, result1, result2, result3, result4, result5, result6, result7;\n        var pos0, pos1, pos2;\n        \n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse__();\n        if (result0 !== null) {\n          result1 = parse_bar();\n          result1 = result1 !== null ? result1 : \"\";\n          if (result1 !== null) {\n            result3 = parse_note_element();\n            if (result3 === null) {\n              result3 = parse_tuplet();\n            }\n            if (result3 !== null) {\n              result2 = [];\n              while (result3 !== null) {\n                result2.push(result3);\n                result3 = parse_note_element();\n                if (result3 === null) {\n                  result3 = parse_tuplet();\n                }\n              }\n            } else {\n              result2 = null;\n            }\n            if (result2 !== null) {\n              result3 = parse__();\n              if (result3 !== null) {\n                result4 = parse_bar();\n                if (result4 === null) {\n                  result4 = parse_nth_repeat();\n                }\n                if (result4 !== null) {\n                  result5 = parse_nth_repeat();\n                  result5 = result5 !== null ? result5 : \"\";\n                  if (result5 !== null) {\n                    pos2 = pos;\n                    if (input.charCodeAt(pos) === 92) {\n                      result6 = \"\\\\\";\n                      pos++;\n                    } else {\n                      result6 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\"\\\\\\\\\\\"\");\n                      }\n                    }\n                    if (result6 !== null) {\n                      result7 = parse_nl();\n                      if (result7 !== null) {\n                        result6 = [result6, result7];\n                      } else {\n                        result6 = null;\n                        pos = pos2;\n                      }\n                    } else {\n                      result6 = null;\n                      pos = pos2;\n                    }\n                    result6 = result6 !== null ? result6 : \"\";\n                    if (result6 !== null) {\n                      result0 = [result0, result1, result2, result3, result4, result5, result6];\n                    } else {\n                      result0 = null;\n                      pos = pos1;\n                    }\n                  } else {\n                    result0 = null;\n                    pos = pos1;\n                  }\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, notes, bar) {\n        \n            var finalNotes = [];\n            var counter    = 0;\n            var beams      = [[]];\n            var len = notes.length;\n        \n            for (var n = 0; n<len; n++) {\n                var note        = notes[n];\n                var lastBeam    = beams[beams.length - 1];\n                var lastBeamLen = lastBeam.length;\n        \n                if (note.note === \"rest\") {\n                    // If the last beam contains only one note there is really no need\n                    // for beaming, so I delete the 'beam' property from that lone note\n                    // and then lastBeam is emptied.\n                    // In case the last beam contains more notes, an empty array is\n                    // pushed in beams to break the beaming. The counter is increased\n                    // so the next generated beam is a new one.\n                    if (lastBeamLen === 1) {\n                        lastBeam[0].beam = null;\n                        lastBeam.pop();\n                    }\n                    else if (lastBeamLen > 1) { beams.push([]); }\n        \n                    counter = counter + 1;\n                    finalNotes.push([note]);\n                    continue;\n                }\n        \n                if (len > 1) {\n                    if (note.duration < QUARTER &&\n                        !((n === len-1) && !lastBeamLen)) {\n                            lastBeam.push(note);\n                            note.beam = counter;\n                    } else if (note.duration >= QUARTER) {\n                        if (lastBeamLen === 1) {\n                            lastBeam[0].beam = null;\n                            lastBeam.pop();\n                        } else if (lastBeamLen > 1) {\n                            counter++;\n                            beams.push([]);\n                        }\n                    }\n                }\n        \n                if (!Array.isArray(note))\n                    note = [note];\n        \n                finalNotes.push(note);\n            }\n            var mObj = { bar: bar[0], chords: [] };\n        \n            // For each note/chord we create a chord object that contains a notes array\n            // with the proper note/chord, and attach it to the chords that the measure\n            // will contain.\n            finalNotes.forEach(function(n) { mObj.chords.push({ notes: n }); });\n        \n            return mObj;\n        })(pos0, result0[2], result0[4]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_note_element() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_note_stem();\n        if (result0 !== null) {\n          result1 = parse_broken_rhythm();\n          result1 = result1 !== null ? result1 : \"\";\n          if (result1 !== null) {\n            result2 = parse__();\n            result2 = result2 !== null ? result2 : \"\";\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, n) { return n })(pos0, result0[0]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_note_stem() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_guitar_chord();\n        result0 = result0 !== null ? result0 : \"\";\n        if (result0 !== null) {\n          result1 = parse_grace_notes();\n          result1 = result1 !== null ? result1 : \"\";\n          if (result1 !== null) {\n            result2 = [];\n            result3 = parse_gracings();\n            while (result3 !== null) {\n              result2.push(result3);\n              result3 = parse_gracings();\n            }\n            if (result2 !== null) {\n              result3 = parse_note();\n              if (result3 === null) {\n                result3 = parse_chord();\n              }\n              if (result3 !== null) {\n                result0 = [result0, result1, result2, result3];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, gc, gn, n) {\n                if (gc)\n                    n.guitar_chord = gc;\n                if (gn)\n                    n.grace_notes  = gn;\n        \n                return n;\n            })(pos0, result0[0], result0[1], result0[3]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_chord() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 91) {\n          result0 = \"[\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"[\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result2 = parse_note();\n          if (result2 !== null) {\n            result1 = [];\n            while (result2 !== null) {\n              result1.push(result2);\n              result2 = parse_note();\n            }\n          } else {\n            result1 = null;\n          }\n          if (result1 !== null) {\n            if (input.charCodeAt(pos) === 93) {\n              result2 = \"]\";\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"]\\\"\");\n              }\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, n) { return n })(pos0, result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_note() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_note_or_rest();\n        if (result0 !== null) {\n          result1 = parse_time_signature();\n          result1 = result1 !== null ? result1 : \"\";\n          if (result1 !== null) {\n            result2 = parse__();\n            result2 = result2 !== null ? result2 : \"\";\n            if (result2 !== null) {\n              result3 = parse_tie();\n              result3 = result3 !== null ? result3 : \"\";\n              if (result3 !== null) {\n                result0 = [result0, result1, result2, result3];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, n, time, tie) {\n            if (time) {\n                n.duration = time.duration;\n                n.dots = time.dots\n            }\n            else {\n                n.duration = defaultTime || defaultMeter;\n            }\n        \n            if (tie)\n                n.tie = true;\n        \n            return n;\n        })(pos0, result0[0], result0[1], result0[3]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_note_or_rest() {\n        var result0;\n        var pos0;\n        \n        pos0 = pos;\n        result0 = parse_pitch();\n        if (result0 === null) {\n          result0 = parse_rest();\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, n) { return n })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_pitch() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_accidental();\n        result0 = result0 !== null ? result0 : \"\";\n        if (result0 !== null) {\n          result1 = parse_basenote();\n          if (result1 !== null) {\n            result2 = parse_octave();\n            result2 = result2 !== null ? result2 : \"\";\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, acc, bn, o) {\n            var obj = {\n                accidental: acc,\n                note: bn + o\n            }\n        \n            if (!acc)\n                delete obj.accidental;\n        \n            return obj;\n        })(pos0, result0[0], result0[1], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_octave() {\n        var result0;\n        \n        if (input.charCodeAt(pos) === 39) {\n          result0 = \"'\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"'\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 44) {\n            result0 = \",\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\",\\\"\");\n            }\n          }\n        }\n        return result0;\n      }\n      \n      function parse_basenote() {\n        var result0;\n        \n        if (/^[A-G]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[A-G]\");\n          }\n        }\n        if (result0 === null) {\n          if (/^[a-g]/.test(input.charAt(pos))) {\n            result0 = input.charAt(pos);\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"[a-g]\");\n            }\n          }\n        }\n        return result0;\n      }\n      \n      function parse_rest() {\n        var result0;\n        var pos0;\n        \n        pos0 = pos;\n        if (input.charCodeAt(pos) === 122) {\n          result0 = \"z\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"z\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) { return { note: \"rest\" } })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_tie() {\n        var result0;\n        \n        if (input.charCodeAt(pos) === 45) {\n          result0 = \"-\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"-\\\"\");\n          }\n        }\n        return result0;\n      }\n      \n      function parse_gracings() {\n        var result0;\n        \n        if (input.charCodeAt(pos) === 126) {\n          result0 = \"~\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"~\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 46) {\n            result0 = \".\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\".\\\"\");\n            }\n          }\n          if (result0 === null) {\n            if (input.charCodeAt(pos) === 118) {\n              result0 = \"v\";\n              pos++;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"v\\\"\");\n              }\n            }\n            if (result0 === null) {\n              if (input.charCodeAt(pos) === 117) {\n                result0 = \"u\";\n                pos++;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"u\\\"\");\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      \n      function parse_grace_notes() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 123) {\n          result0 = \"{\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"{\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result2 = parse_pitch();\n          if (result2 !== null) {\n            result1 = [];\n            while (result2 !== null) {\n              result1.push(result2);\n              result2 = parse_pitch();\n            }\n          } else {\n            result1 = null;\n          }\n          if (result1 !== null) {\n            if (input.charCodeAt(pos) === 125) {\n              result2 = \"}\";\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"}\\\"\");\n              }\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, p) { return p })(pos0, result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_broken_rhythm() {\n        var result0, result1;\n        \n        if (input.charCodeAt(pos) === 60) {\n          result1 = \"<\";\n          pos++;\n        } else {\n          result1 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"<\\\"\");\n          }\n        }\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            if (input.charCodeAt(pos) === 60) {\n              result1 = \"<\";\n              pos++;\n            } else {\n              result1 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"<\\\"\");\n              }\n            }\n          }\n        } else {\n          result0 = null;\n        }\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 62) {\n            result1 = \">\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\">\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result0 = [];\n            while (result1 !== null) {\n              result0.push(result1);\n              if (input.charCodeAt(pos) === 62) {\n                result1 = \">\";\n                pos++;\n              } else {\n                result1 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\">\\\"\");\n                }\n              }\n            }\n          } else {\n            result0 = null;\n          }\n        }\n        return result0;\n      }\n      \n      function parse_tuplet() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_tuplet_spec();\n        if (result0 !== null) {\n          result2 = parse_note_element();\n          if (result2 !== null) {\n            result1 = [];\n            while (result2 !== null) {\n              result1.push(result2);\n              result2 = parse_note_element();\n            }\n          } else {\n            result1 = null;\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, n) {\n            return {\n                type: \"tuple\",\n                notes: n\n            }\n        })(pos0, result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_tuplet_spec() {\n        var result0, result1, result2, result3, result4, result5;\n        var pos0, pos1, pos2;\n        \n        pos0 = pos;\n        if (input.charCodeAt(pos) === 40) {\n          result0 = \"(\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"(\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_integer();\n          if (result1 !== null) {\n            pos1 = pos;\n            if (input.charCodeAt(pos) === 58) {\n              result2 = \":\";\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\":\\\"\");\n              }\n            }\n            if (result2 !== null) {\n              result3 = parse_integer();\n              if (result3 !== null) {\n                pos2 = pos;\n                if (input.charCodeAt(pos) === 58) {\n                  result4 = \":\";\n                  pos++;\n                } else {\n                  result4 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\":\\\"\");\n                  }\n                }\n                if (result4 !== null) {\n                  result5 = parse_integer();\n                  result5 = result5 !== null ? result5 : \"\";\n                  if (result5 !== null) {\n                    result4 = [result4, result5];\n                  } else {\n                    result4 = null;\n                    pos = pos2;\n                  }\n                } else {\n                  result4 = null;\n                  pos = pos2;\n                }\n                result4 = result4 !== null ? result4 : \"\";\n                if (result4 !== null) {\n                  result2 = [result2, result3, result4];\n                } else {\n                  result2 = null;\n                  pos = pos1;\n                }\n              } else {\n                result2 = null;\n                pos = pos1;\n              }\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n            result2 = result2 !== null ? result2 : \"\";\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_bar() {\n        var result0, result1;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        result0 = parse_bars();\n        if (result0 !== null) {\n          pos1 = pos;\n          reportFailures++;\n          result1 = parse_stringNum();\n          reportFailures--;\n          if (result1 === null) {\n            result1 = \"\";\n          } else {\n            result1 = null;\n            pos = pos1;\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_bars() {\n        var result0;\n        \n        if (input.substr(pos, 2) === \"|]\") {\n          result0 = \"|]\";\n          pos += 2;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"|]\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.substr(pos, 2) === \"||\") {\n            result0 = \"||\";\n            pos += 2;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"||\\\"\");\n            }\n          }\n          if (result0 === null) {\n            if (input.substr(pos, 2) === \"[|\") {\n              result0 = \"[|\";\n              pos += 2;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"[|\\\"\");\n              }\n            }\n            if (result0 === null) {\n              if (input.substr(pos, 2) === \"|]\") {\n                result0 = \"|]\";\n                pos += 2;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"|]\\\"\");\n                }\n              }\n              if (result0 === null) {\n                if (input.substr(pos, 2) === \"|:\") {\n                  result0 = \"|:\";\n                  pos += 2;\n                } else {\n                  result0 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"|:\\\"\");\n                  }\n                }\n                if (result0 === null) {\n                  if (input.charCodeAt(pos) === 124) {\n                    result0 = \"|\";\n                    pos++;\n                  } else {\n                    result0 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"|\\\"\");\n                    }\n                  }\n                  if (result0 === null) {\n                    if (input.substr(pos, 2) === \":|\") {\n                      result0 = \":|\";\n                      pos += 2;\n                    } else {\n                      result0 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\":|\\\"\");\n                      }\n                    }\n                    if (result0 === null) {\n                      if (input.substr(pos, 2) === \"::\") {\n                        result0 = \"::\";\n                        pos += 2;\n                      } else {\n                        result0 = null;\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\"::\\\"\");\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      \n      function parse_nth_repeat() {\n        var result0;\n        \n        if (input.substr(pos, 2) === \"[1\") {\n          result0 = \"[1\";\n          pos += 2;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"[1\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.substr(pos, 2) === \"[2\") {\n            result0 = \"[2\";\n            pos += 2;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"[2\\\"\");\n            }\n          }\n          if (result0 === null) {\n            if (input.substr(pos, 2) === \"|1\") {\n              result0 = \"|1\";\n              pos += 2;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"|1\\\"\");\n              }\n            }\n            if (result0 === null) {\n              if (input.substr(pos, 3) === \":|2\") {\n                result0 = \":|2\";\n                pos += 3;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\":|2\\\"\");\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      \n      function parse_guitar_chord() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 34) {\n          result0 = \"\\\"\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"\\\\\\\"\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_string_no_quotes();\n          if (result1 !== null) {\n            if (input.charCodeAt(pos) === 34) {\n              result2 = \"\\\"\";\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"\\\\\\\"\\\"\");\n              }\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, chord) { return chord })(pos0, result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_sharp() {\n        var result0, result1;\n        var pos0, pos1, pos2;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 94) {\n          result0 = \"^\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"^\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          pos2 = pos;\n          reportFailures++;\n          if (input.charCodeAt(pos) === 94) {\n            result1 = \"^\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"^\\\"\");\n            }\n          }\n          reportFailures--;\n          if (result1 === null) {\n            result1 = \"\";\n          } else {\n            result1 = null;\n            pos = pos2;\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) { return \"sharp\" })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_natural() {\n        var result0;\n        \n        if (input.charCodeAt(pos) === 61) {\n          result0 = \"=\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"=\\\"\");\n          }\n        }\n        return result0;\n      }\n      \n      function parse_flat() {\n        var result0, result1;\n        var pos0, pos1, pos2;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 95) {\n          result0 = \"_\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"_\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          pos2 = pos;\n          reportFailures++;\n          if (input.charCodeAt(pos) === 95) {\n            result1 = \"_\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"_\\\"\");\n            }\n          }\n          reportFailures--;\n          if (result1 === null) {\n            result1 = \"\";\n          } else {\n            result1 = null;\n            pos = pos2;\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) { return \"flat\" })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_double_sharp() {\n        var result0;\n        var pos0;\n        \n        pos0 = pos;\n        if (input.substr(pos, 2) === \"^^\") {\n          result0 = \"^^\";\n          pos += 2;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"^^\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) { return \"dsharp\" })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_double_flat() {\n        var result0;\n        var pos0;\n        \n        pos0 = pos;\n        if (input.substr(pos, 2) === \"__\") {\n          result0 = \"__\";\n          pos += 2;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"__\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) { return \"dflat\" })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_accidental() {\n        var result0;\n        \n        result0 = parse_sharp();\n        if (result0 === null) {\n          result0 = parse_flat();\n          if (result0 === null) {\n            result0 = parse_natural();\n            if (result0 === null) {\n              result0 = parse_double_sharp();\n              if (result0 === null) {\n                result0 = parse_double_flat();\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      \n      function parse_middle_pairs() {\n        var result0;\n        \n        if (/^[^XKa-z]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[^XKa-z]\");\n          }\n        }\n        return result0;\n      }\n      \n      function parse_time_signature() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_stringNum();\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 47) {\n            result1 = \"/\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"/\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_stringNum();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, ts) {\n                var num    = parseInt(ts[0]) * (defaultTime || defaultMeter);\n                var denom  = parseInt(ts[2]);\n                var result = parseInt(num/denom);\n        \n                return createTimeSignature(result);\n            })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 47) {\n            result0 = \"/\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"/\\\"\");\n            }\n          }\n          if (result0 !== null) {\n            result1 = parse_stringNum();\n            if (result1 !== null) {\n              result0 = [result0, result1];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = (function(offset, ts) {\n                  var result = parseInt((defaultTime || defaultMeter) / parseInt(ts[1]));\n                  return createTimeSignature(result);\n              })(pos0, result0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n          if (result0 === null) {\n            pos0 = pos;\n            result0 = parse_stringNum();\n            if (result0 !== null) {\n              result0 = (function(offset, ts) {\n                    return createTimeSignature(parseFloat((defaultTime || defaultMeter) * eval(ts)))\n                })(pos0, result0);\n            }\n            if (result0 === null) {\n              pos = pos0;\n            }\n            if (result0 === null) {\n              pos0 = pos;\n              if (input.charCodeAt(pos) === 47) {\n                result0 = \"/\";\n                pos++;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"/\\\"\");\n                }\n              }\n              if (result0 !== null) {\n                result0 = (function(offset, ts) {\n                      var result = parseInt((defaultTime || defaultMeter) / 2);\n                      return createTimeSignature(result);\n                  })(pos0, result0);\n              }\n              if (result0 === null) {\n                pos = pos0;\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      \n      function parse_stringNum() {\n        var result0, result1;\n        var pos0;\n        \n        pos0 = pos;\n        if (/^[0-9]/.test(input.charAt(pos))) {\n          result1 = input.charAt(pos);\n          pos++;\n        } else {\n          result1 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[0-9]\");\n          }\n        }\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            if (/^[0-9]/.test(input.charAt(pos))) {\n              result1 = input.charAt(pos);\n              pos++;\n            } else {\n              result1 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"[0-9]\");\n              }\n            }\n          }\n        } else {\n          result0 = null;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, digits) { return digits.join(\"\"); })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_integer() {\n        var result0;\n        var pos0;\n        \n        reportFailures++;\n        pos0 = pos;\n        result0 = parse_stringNum();\n        if (result0 !== null) {\n          result0 = (function(offset, digits) { return parseInt(digits, 10); })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        reportFailures--;\n        if (reportFailures === 0 && result0 === null) {\n          matchFailed(\"integer\");\n        }\n        return result0;\n      }\n      \n      function parse_string() {\n        var result0, result1;\n        var pos0;\n        \n        pos0 = pos;\n        if (/^[A-Za-z0-9,\\/'\"#&.=()\\-[\\]: ]/.test(input.charAt(pos))) {\n          result1 = input.charAt(pos);\n          pos++;\n        } else {\n          result1 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[A-Za-z0-9,\\\\/'\\\"#&.=()\\\\-[\\\\]: ]\");\n          }\n        }\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            if (/^[A-Za-z0-9,\\/'\"#&.=()\\-[\\]: ]/.test(input.charAt(pos))) {\n              result1 = input.charAt(pos);\n              pos++;\n            } else {\n              result1 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"[A-Za-z0-9,\\\\/'\\\"#&.=()\\\\-[\\\\]: ]\");\n              }\n            }\n          }\n        } else {\n          result0 = null;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, chars) { return chars.join ? chars.join(\"\") : chars; })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_string_no_quotes() {\n        var result0, result1;\n        var pos0;\n        \n        pos0 = pos;\n        if (/^[A-Za-z0-9,\\/#&.=()\\-[\\]: ]/.test(input.charAt(pos))) {\n          result1 = input.charAt(pos);\n          pos++;\n        } else {\n          result1 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[A-Za-z0-9,\\\\/#&.=()\\\\-[\\\\]: ]\");\n          }\n        }\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            if (/^[A-Za-z0-9,\\/#&.=()\\-[\\]: ]/.test(input.charAt(pos))) {\n              result1 = input.charAt(pos);\n              pos++;\n            } else {\n              result1 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"[A-Za-z0-9,\\\\/#&.=()\\\\-[\\\\]: ]\");\n              }\n            }\n          }\n        } else {\n          result0 = null;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, chars) { return chars.join ? chars.join(\"\") : chars; })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_alpha() {\n        var result0;\n        var pos0;\n        \n        pos0 = pos;\n        if (/^[a-zA-Z]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[a-zA-Z]\");\n          }\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, chars) {\n             if (chars.join)\n                 return chars.join(\"\")\n             else\n                 return chars\n        })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse__() {\n        var result0, result1;\n        \n        result0 = [];\n        result1 = parse_whitespace();\n        if (result1 === null) {\n          result1 = parse_comment();\n        }\n        while (result1 !== null) {\n          result0.push(result1);\n          result1 = parse_whitespace();\n          if (result1 === null) {\n            result1 = parse_comment();\n          }\n        }\n        return result0;\n      }\n      \n      function parse_whitespace() {\n        var result0;\n        \n        if (/^[\\t\\x0B\\f \\xA0\\uFEFF]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[\\\\t\\\\x0B\\\\f \\\\xA0\\\\uFEFF]\");\n          }\n        }\n        if (result0 === null) {\n          result0 = parse_Zs();\n          if (result0 === null) {\n            result0 = parse_nl();\n          }\n        }\n        return result0;\n      }\n      \n      function parse_LineTerminator() {\n        var result0;\n        \n        if (/^[\\n\\r\\u2028\\u2029]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[\\\\n\\\\r\\\\u2028\\\\u2029]\");\n          }\n        }\n        return result0;\n      }\n      \n      function parse_nl() {\n        var result0;\n        \n        if (input.charCodeAt(pos) === 10) {\n          result0 = \"\\n\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"\\\\n\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.substr(pos, 2) === \"\\r\\n\") {\n            result0 = \"\\r\\n\";\n            pos += 2;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"\\\\r\\\\n\\\"\");\n            }\n          }\n          if (result0 === null) {\n            if (input.charCodeAt(pos) === 13) {\n              result0 = \"\\r\";\n              pos++;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"\\\\r\\\"\");\n              }\n            }\n            if (result0 === null) {\n              if (input.charCodeAt(pos) === 8232) {\n                result0 = \"\\u2028\";\n                pos++;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"\\\\u2028\\\"\");\n                }\n              }\n              if (result0 === null) {\n                if (input.charCodeAt(pos) === 8233) {\n                  result0 = \"\\u2029\";\n                  pos++;\n                } else {\n                  result0 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"\\\\u2029\\\"\");\n                  }\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      \n      function parse_comment() {\n        var result0, result1, result2, result3;\n        var pos0, pos1, pos2;\n        \n        pos0 = pos;\n        if (input.charCodeAt(pos) === 37) {\n          result0 = \"%\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"%\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = [];\n          pos1 = pos;\n          pos2 = pos;\n          reportFailures++;\n          result2 = parse_nl();\n          reportFailures--;\n          if (result2 === null) {\n            result2 = \"\";\n          } else {\n            result2 = null;\n            pos = pos2;\n          }\n          if (result2 !== null) {\n            if (input.length > pos) {\n              result3 = input.charAt(pos);\n              pos++;\n            } else {\n              result3 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"any character\");\n              }\n            }\n            if (result3 !== null) {\n              result2 = [result2, result3];\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          } else {\n            result2 = null;\n            pos = pos1;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos1 = pos;\n            pos2 = pos;\n            reportFailures++;\n            result2 = parse_nl();\n            reportFailures--;\n            if (result2 === null) {\n              result2 = \"\";\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n            if (result2 !== null) {\n              if (input.length > pos) {\n                result3 = input.charAt(pos);\n                pos++;\n              } else {\n                result3 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"any character\");\n                }\n              }\n              if (result3 !== null) {\n                result2 = [result2, result3];\n              } else {\n                result2 = null;\n                pos = pos1;\n              }\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_Zs() {\n        var result0;\n        \n        if (/^[ \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[ \\\\xA0\\\\u1680\\\\u180E\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200A\\\\u202F\\\\u205F\\\\u3000]\");\n          }\n        }\n        return result0;\n      }\n      \n      function parse_EOF() {\n        var result0;\n        var pos0;\n        \n        pos0 = pos;\n        reportFailures++;\n        if (input.length > pos) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"any character\");\n          }\n        }\n        reportFailures--;\n        if (result0 === null) {\n          result0 = \"\";\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      \n      function cleanupExpected(expected) {\n        expected.sort();\n        \n        var lastExpected = null;\n        var cleanExpected = [];\n        for (var i = 0; i < expected.length; i++) {\n          if (expected[i] !== lastExpected) {\n            cleanExpected.push(expected[i]);\n            lastExpected = expected[i];\n          }\n        }\n        return cleanExpected;\n      }\n      \n      function computeErrorPosition() {\n        /*\n         * The first idea was to use |String.split| to break the input up to the\n         * error position along newlines and derive the line and column from\n         * there. However IE's |split| implementation is so broken that it was\n         * enough to prevent it.\n         */\n        \n        var line = 1;\n        var column = 1;\n        var seenCR = false;\n        \n        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {\n          var ch = input.charAt(i);\n          if (ch === \"\\n\") {\n            if (!seenCR) { line++; }\n            column = 1;\n            seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            line++;\n            column = 1;\n            seenCR = true;\n          } else {\n            column++;\n            seenCR = false;\n          }\n        }\n        \n        return { line: line, column: column };\n      }\n      \n      \n          var defaultTime = undefined;\n          var defaultMeter = undefined;\n      \n          var WHOLE   = 256,\n              HALF    = 128,\n              QUARTER = 64,\n              _4TH    = 32,\n              _16TH   = 16,\n              _32TH   = 8,\n              _64TH   = 4,\n              _128TH  = 2;\n      \n          var durations = [_128TH, _64TH, _32TH, _16TH, _4TH, QUARTER, HALF, WHOLE];\n          var isDotted = function(duration) {\n              return durations.indexOf(duration) === -1;\n          };\n      \n          var getDots = function(duration) {\n              if (duration == 0 || !isDotted(duration))\n                  return 0;\n      \n              var baseNote = 0;\n              var l = durations.length - 1;\n      \n              for (var i=l; i>=0; i--) {\n                  if (duration > durations[i]) {\n                      baseNote = durations[i];\n                      break;\n                  }\n              }\n      \n              if (baseNote == 0)\n                  throw new Error(\"Duration out of range\")\n      \n              return {\n                  duration: baseNote,\n                  dots: 1 + getDots(duration - baseNote)\n              }\n          }\n      \n          var createTimeSignature = function(result) {\n              if (isDotted(result)) {\n                  return getDots(result);\n              } else {\n                  return {\n                      duration: result,\n                      dots: 0\n                  }\n              }\n          };\n      \n      \n      var result = parseFunctions[startRule]();\n      \n      /*\n       * The parser is now in one of the following three states:\n       *\n       * 1. The parser successfully parsed the whole input.\n       *\n       *    - |result !== null|\n       *    - |pos === input.length|\n       *    - |rightmostFailuresExpected| may or may not contain something\n       *\n       * 2. The parser successfully parsed only a part of the input.\n       *\n       *    - |result !== null|\n       *    - |pos < input.length|\n       *    - |rightmostFailuresExpected| may or may not contain something\n       *\n       * 3. The parser did not successfully parse any part of the input.\n       *\n       *   - |result === null|\n       *   - |pos === 0|\n       *   - |rightmostFailuresExpected| contains at least one failure\n       *\n       * All code following this comment (including called functions) must\n       * handle these states.\n       */\n      if (result === null || pos !== input.length) {\n        var offset = Math.max(pos, rightmostFailuresPos);\n        var found = offset < input.length ? input.charAt(offset) : null;\n        var errorPosition = computeErrorPosition();\n        \n        throw new this.SyntaxError(\n          cleanupExpected(rightmostFailuresExpected),\n          found,\n          offset,\n          errorPosition.line,\n          errorPosition.column\n        );\n      }\n      \n      return result;\n    },\n    \n    /* Returns the parser source code. */\n    toSource: function() { return this._source; }\n  };\n  \n  /* Thrown when a parser encounters a syntax error. */\n  \n  result.SyntaxError = function(expected, found, offset, line, column) {\n    function buildMessage(expected, found) {\n      var expectedHumanized, foundHumanized;\n      \n      switch (expected.length) {\n        case 0:\n          expectedHumanized = \"end of input\";\n          break;\n        case 1:\n          expectedHumanized = expected[0];\n          break;\n        default:\n          expectedHumanized = expected.slice(0, expected.length - 1).join(\", \")\n            + \" or \"\n            + expected[expected.length - 1];\n      }\n      \n      foundHumanized = found ? quote(found) : \"end of input\";\n      \n      return \"Expected \" + expectedHumanized + \" but \" + foundHumanized + \" found.\";\n    }\n    \n    this.name = \"SyntaxError\";\n    this.expected = expected;\n    this.found = found;\n    this.message = buildMessage(expected, found);\n    this.offset = offset;\n    this.line = line;\n    this.column = column;\n  };\n  \n  result.SyntaxError.prototype = Error.prototype;\n  \n  return result;\n})()"}